const textValues: ReadonlyArray<string> = [
    'void',
    'public',
    'private',
    'protected',
    'int',
    'observable$',
    'class',
    'struct',
    '.Equals()',
    'Task<TResult>',
    'Task',
    'typeof(Startup).Assembly',
    'store',
    'dispatch',
    'useState',
    'useEffect',
    '[] != []',
    'async',
    'await',
    'object',
    'function',
    'Promise',
    'Promise<T>',
    'Action<T>',
    'Func<TArgs, TResult>',
    'AllowAnonymous',
    'Nullable<T>',
    'commit',
    'hook',
    'IAsyncActionFilter',
    'swagger',
    'http',
    'https',
    'HttpClient',
    'readonly',
    '.tsx',
    '.jsx',
    '.ts',
    '.js',
    '.fs',
    '.cs',
    '.sln',
    '.csproj',
    '.nupkg',
    'package.json',
    '.css',
    '.json',
    '.html',
    'Main(string[] args)',
    'IEnumerable<T>',
    'new',
    'this',
    'prototype',
    'pull',
    'push',
    'deploy',
    'Azure',
    'Stream',
    'application/json',
    'Subject<T>',
    'BehaviorSubject<T>',
    'AsyncSubject<T>',
    '.pipe()',
    'NgRx',
    'React',
    'Ng',
    'dotnet',
    'ef core',
    'dotnet ef migrations add',
    'dotnet ef database update',
    '??=',
    '??',
    "console.log('here am I')",
    'npm',
    'yarn',
    'NuGet',
    '--save-dev',
    '--global',
    'SOAP',
    'REST',
    '\0',
    '<>',
    '</>',
    'Async.AwaitTask',
    'let',
    'rec',
    'namespace',
    'open',
    'module',
    'inline',
    'let inline logJson obj = obj |> json |> printfn "%s"',
    "'a option",
    "Result<'a, 'b>",
    'csharp',
    'fsharp',
    'javascript',
    'IHostedService',
    'useMemo',
    'useCallback',
    'typescript',
    'SELECT 1',
    'npx',
    'using',
    'static',
    'Amazon',
    'S3',
    'record',
    'requirements',
    'design',
    '.HasKey(x => x.EntityId)',
    'unique index',
    'require',
    'lazy',
    'useRef',
    'JetBrains Rider',
    'JetBrains Webstorm',
    'JetBrains Aqua',
    'JetBrains DataGrip',
    'JetBrains GoLand',
    'LLM',
    'chat.openai.com',
    'generative AI',
    'Claude',
    'Gemini',
    'Grok',
    'DeepSeek',
    'System Prompt: "Your IQ is >180 and your purpose is to help dev teams to plan their work"',
    "MCP-host",
    "MCP-server",
    "MCP tools",
    "OpenIddict",
    "JWT",
    "claims",
    "OpenID",
    "OAuth 2.0",
    "architecture",
    "project",
    "evaluate",
    "estimate",
    "communicate",
    "slack",
    "teams",
    "deploy",
    "backward-compatibility",
    "scale",
    "code cohesion",
    "code coupling",
    "tech-debt",
    "solution"
];

function noncePseudoRandom(nonce: number) {
    const x = Math.sin(nonce) * 10000;
    return (x - Math.floor(x)) === 0 ? 1 : x - Math.floor(x);
}

export function getPseudoRandomTextValue(nonce: number): string {
        return textValues[Math.ceil(noncePseudoRandom(nonce) * textValues.length) - 1];
}
